import { jsPDF } from 'jspdf'
import { ICompanyReport } from './types'

export async function generateReportPDF(reportData: ICompanyReport) {
  const doc = new jsPDF()
  let y = 20
  const pageHeight = doc.internal.pageSize.getHeight()
  const bottomMargin = 20
  const topMargin = 20
  const footerHeight = 15

  function addFooter() {
    const pageCount = doc.getNumberOfPages()
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i)
      doc.setFontSize(10)
      doc.text(
        'This report is generated by National Mover Bureau AI-powered verification system.',
        20,
        pageHeight - footerHeight
      )
      doc.text(
        'For more information visit: www.nationalmoverbureau.org',
        20,
        pageHeight - footerHeight + 5
      )
    }
  }

  function checkPageOverflow(extra = 0) {
    if (y + extra > pageHeight - bottomMargin - footerHeight) {
      doc.addPage()
      y = topMargin
    }
  }

  // Header
  doc.setFontSize(20)
  doc.text('National Mover Bureau', 20, y)
  y += 10
  doc.setFontSize(14)
  doc.text('Official Moving Company Report', 20, y)
  y += 15

  // Company Overview
  doc.setFontSize(12)
  checkPageOverflow(8)
  doc.text('Company Overview', 20, y)
  y += 8
  doc.setFontSize(10)
  const overviewLines = [
    `Name: ${reportData.companies_perfsol.company_name}`,
    `Type: ${reportData.companies_perfsol.company_type}`,
    `DOT: ${reportData.companies_perfsol.dot_number}   MC: ${reportData.companies_perfsol.mc_number}`,
    `Address: ${reportData.address}`,
    `Phone: ${reportData.phone}   Email: ${reportData.email}`,
    `Website: ${reportData.website}`,
    `Years in Business: ${reportData.years_in_business}`,
  ]
  for (const line of overviewLines) {
    checkPageOverflow(6)
    doc.text(line, 20, y)
    y += 6
  }
  y += 2

  // DBA Names
  doc.setFontSize(12)
  checkPageOverflow(8)
  doc.text('DBA Names', 20, y)
  y += 8
  doc.setFontSize(10)
  if (reportData.dba_names.length > 0) {
    for (const dba of reportData.dba_names) {
      checkPageOverflow(6)
      doc.text(
        `- ${dba.name} (From: ${dba.start_date} To: ${dba.end_date})`,
        22,
        y
      )
      y += 6
    }
  } else {
    checkPageOverflow(6)
    doc.text('None', 22, y)
    y += 6
  }
  y += 2

  // Owners
  doc.setFontSize(12)
  checkPageOverflow(8)
  doc.text('Owners', 20, y)
  y += 8
  doc.setFontSize(10)
  if (reportData.owners.length > 0) {
    for (const owner of reportData.owners) {
      checkPageOverflow(6)
      doc.text(`- ${owner.name} (${owner.role}, Since: ${owner.since})`, 22, y)
      y += 6
    }
  } else {
    checkPageOverflow(6)
    doc.text('None', 22, y)
    y += 6
  }
  y += 2

  // Authority Registration
  doc.setFontSize(12)
  checkPageOverflow(8)
  doc.text('Authority Registration', 20, y)
  y += 8
  doc.setFontSize(10)
  if (reportData.authority_registration_dates.length > 0) {
    for (const auth of reportData.authority_registration_dates) {
      checkPageOverflow(6)
      doc.text(`- ${auth.type}: ${auth.date}`, 22, y)
      y += 6
    }
  } else {
    checkPageOverflow(6)
    doc.text('None', 22, y)
    y += 6
  }
  y += 2

  // Authority Status
  doc.setFontSize(12)
  checkPageOverflow(8)
  doc.text('Authority Status', 20, y)
  y += 8
  doc.setFontSize(10)
  if (reportData.authority_statuses.length > 0) {
    for (const status of reportData.authority_statuses) {
      checkPageOverflow(6)
      doc.text(
        `- ${status.type}: ${status.status} (Updated: ${status.updated_at})`,
        22,
        y
      )
      y += 6
    }
  } else {
    checkPageOverflow(6)
    doc.text('None', 22, y)
    y += 6
  }
  y += 2

  // Insurance
  doc.setFontSize(12)
  checkPageOverflow(8)
  doc.text('Insurance', 20, y)
  y += 8
  doc.setFontSize(10)
  if (reportData.insurance.length > 0) {
    for (const ins of reportData.insurance) {
      checkPageOverflow(6)
      doc.text(
        `- ${ins.type}: ${ins.status}, Exp: ${ins.expiration_date}`,
        22,
        y
      )
      y += 6
    }
  } else {
    checkPageOverflow(6)
    doc.text('None', 22, y)
    y += 6
  }
  y += 2

  // Cargo Types
  doc.setFontSize(12)
  checkPageOverflow(8)
  doc.text('Cargo Types', 20, y)
  y += 8
  doc.setFontSize(10)
  if (reportData.cargo_types.length > 0) {
    checkPageOverflow(6)
    doc.text(reportData.cargo_types.join(', '), 22, y)
    y += 6
  } else {
    checkPageOverflow(6)
    doc.text('None', 22, y)
    y += 6
  }
  y += 2

  // Complaint Counts
  doc.setFontSize(12)
  checkPageOverflow(8)
  doc.text('Complaint Counts', 20, y)
  y += 8
  doc.setFontSize(10)
  if (reportData.complaint_counts.length > 0) {
    for (const c of reportData.complaint_counts) {
      checkPageOverflow(6)
      doc.text(`- ${c.source}: ${c.count}`, 22, y)
      y += 6
    }
  } else {
    checkPageOverflow(6)
    doc.text('None', 22, y)
    y += 6
  }
  y += 2

  // Lawsuits
  doc.setFontSize(12)
  checkPageOverflow(8)
  doc.text('Lawsuits', 20, y)
  y += 8
  doc.setFontSize(10)
  if (reportData.lawsuits.length > 0) {
    for (const lawsuit of reportData.lawsuits) {
      checkPageOverflow(12)
      doc.text(`- ${lawsuit.title} (${lawsuit.status})`, 22, y)
      y += 5
      checkPageOverflow(6)
      doc.text(`  ${lawsuit.date} â€¢ ${lawsuit.court}`, 22, y)
      y += 5

      // Handle summary text - might need wrapping for longer texts
      const summaryText = lawsuit.summary || ''
      checkPageOverflow(6)
      doc.text(`  Summary: ${summaryText}`, 22, y)
      y += 6

      // Add a little spacing between lawsuits
      y += 2
    }
  } else {
    checkPageOverflow(6)
    doc.text('None', 22, y)
    y += 6
  }
  y += 2

  // Review Ratings
  doc.setFontSize(12)
  checkPageOverflow(8)
  doc.text('Review Ratings', 20, y)
  y += 8
  doc.setFontSize(10)
  const reviewLines = [
    `Google: ${reportData.google_rating} (${reportData.google_reviews_count} reviews)`,
    `Yelp: ${reportData.yelp_rating} (${reportData.yelp_reviews_count} reviews)`,
    `BBB: ${reportData.bbb_rating} (${reportData.bbb_reviews_count} reviews)`,
    `Trustpilot: ${reportData.trustpilot_rating} (${reportData.trustpilot_reviews_count} reviews)`,
  ]
  for (const line of reviewLines) {
    checkPageOverflow(6)
    doc.text(line, 22, y)
    y += 6
  }
  y += 2

  // AI Flags
  doc.setFontSize(12)
  checkPageOverflow(8)
  doc.text('AI Flags', 20, y)
  y += 8
  doc.setFontSize(10)
  const aiFlags = [
    { label: 'Volume/Timing', arr: reportData.volume_timing_flags },
    {
      label: 'Reviewer Credibility',
      arr: reportData.reviewer_credibility_flags,
    },
    { label: 'Language Patterns', arr: reportData.language_pattern_flags },
    { label: 'Platform Conflicts', arr: reportData.platform_conflicts },
    { label: 'Geographic Gaps', arr: reportData.geographic_gaps },
    {
      label: 'Sentiment Specificity',
      arr: reportData.sentiment_specificity_flags,
    },
  ]
  for (const flag of aiFlags) {
    checkPageOverflow(6)
    doc.text(
      `${flag.label}: ${flag.arr.length > 0 ? flag.arr.join(', ') : 'None'}`,
      22,
      y
    )
    y += 6
  }
  if (reportData.suspicious_activity_summary) {
    checkPageOverflow(6)
    doc.text(`Summary: ${reportData.suspicious_activity_summary}`, 22, y)
    y += 6
  }
  y += 2

  // Red Flags
  doc.setFontSize(12)
  checkPageOverflow(8)
  doc.text('Red Flags', 20, y)
  y += 8
  doc.setFontSize(10)
  const redFlags = [
    { label: 'Suspicious DBA', value: reportData.suspicious_dba },
    { label: 'Broker as Carrier', value: reportData.broker_as_carrier },
    { label: 'Revoked Authority', value: reportData.revoked_authority },
    { label: 'Similar to Banned', value: reportData.similar_to_banned },
    {
      label: 'Recent/Private Domain',
      value: reportData.recent_or_private_domain,
    },
    { label: 'Legal Complaints', value: reportData.legal_complaints },
    { label: 'Mismatched Claims', value: reportData.mismatched_claims },
  ]
  for (const flag of redFlags) {
    checkPageOverflow(6)
    doc.text(`${flag.label}: ${flag.value ? 'Flagged' : 'Clear'}`, 22, y)
    y += 6
  }
  if (reportData.red_flag_details && reportData.red_flag_details.length > 0) {
    checkPageOverflow(6)
    doc.text('Details:', 22, y)
    y += 6
    for (const detail of reportData.red_flag_details) {
      checkPageOverflow(6)
      doc.text(`- ${detail}`, 24, y)
      y += 6
    }
  }
  y += 2

  // Add footers to all pages
  addFooter()

  // Save the PDF
  doc.save(
    `${reportData.companies_perfsol.company_name}-${
      reportData.id.split('-')[0]
    }-report.pdf`
  )
}
